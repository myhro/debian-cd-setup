#!/bin/bash
#
# testingcds.lenny (c) 2005 Santiago Garcia Mantinan <manty@manty.net>
#
# Updates since then by:
# Joey Hess <joey@kitenet.net>
# Steve McIntyre <steve@einval.com>
#
# GPL v2
#
# See cronjob.weekly and cronjob.daily for examples of how to call this script

#set -x

CONF=~/build/CONF.sh.lenny
export CF=$CONF

# Set up and cleaning
if [ $# -lt 1 ] ; then
    echo $0 \$ARCH
    echo "variables: PUBDIR[ISO|JIG]"
    exit 1
fi

export ARCH="$1"
NUM_ARCHES=`echo $ARCH | wc -w`

if [ ! "$JIGDOFALLBACKURLS" ] ; then
   export JIGDOFALLBACKURLS="Debian=http://us.cdimage.debian.org/cdimage/snapshot/Debian/"
fi

# $DI is used to set DI_CODENAME and also to specify the directory for images
if [ "$DI" ] ; then
    export DI_CODENAME="$DI"
fi

export LOG="`pwd`/log/"
if [ "$NUM_ARCHES"x = "1"x ] ; then
    export OUTARCH=$ARCH
else
    export OUTARCH="multiarch"
fi
export RUN="$INSTALLER_CD$DI$OUTARCH$LOGAPPEND"
export LOGFILE="$LOG/$RUN"

case "$INSTALLER_CD" in
    1)
        export DISKTYPE=BC;;
    2|7|8)
        export DISKTYPE=NETINST;;
    3|6)
        export OUT_TYPE=dvd
        export DISKTYPE=DVD;;
    4)
        export DISKTYPE=kde-CD;;
    5)
        export DISKTYPE=xfce-CD;;
    A)
        export DISKTYPE=lxde-CD;;
    B)
        export DISKTYPE=xfce+lxde-CD;;
    9)
        export OUT_TYPE=bd
        export DISKTYPE=BD;;
    *)  export DISKTYPE=CD;;
esac

if [ "$OUT_TYPE"x = ""x ] ; then
    OUT_TYPE=cd
fi

export IMAGETARGET=official_images
cd debian-cd.lenny && . $CONF
echo Making $ARCH "$DISKTYPE" in $OUT

if [ "$OUT"x = ""x ] ; then
    echo Config error
    exit 1
fi

if [ "$INSTALLER_CD" = "1" ] ; then
    export OFFICIAL="Official BusinessCard Snapshot"
elif [ "$INSTALLER_CD" = "2" ] ; then
    export OFFICIAL="Official NetInst Snapshot"
elif [ "$INSTALLER_CD" = "4" ]; then
    export OFFICIAL="Official KDE CD Snapshot"
elif [ "$INSTALLER_CD" = "5" ]; then
    export OFFICIAL="Official Xfce CD Snapshot"
elif [ "$INSTALLER_CD" = "A" ]; then
    export OFFICIAL="Official LXDE CD Snapshot"
elif [ "$INSTALLER_CD" = "B" ]; then
    export OFFICIAL="Official Xfce/LXDE CD Snapshot"
elif [ "$INSTALLER_CD" = "6" ]; then
    export OFFICIAL="Official Multi-Arch DVD"
elif [ "$INSTALLER_CD" = "7" ]; then
    export OFFICIAL="Official Multi-Arch Netinst"
elif [ "$INSTALLER_CD" = "8" ]; then
    export OFFICIAL="Official Multi-Arch Netinst"
fi

rm -rf "$OUT"
mkdir -p "$OUT"
#mkdir -p "$LOG"

overview_log="$LOG/overview"
overview () {
    if [ -e $overview_log ]; then
    	grep -v " $1 " $overview_log > $overview_log.new
        mv $overview_log.new $overview_log
    fi
    LANG=C echo "$(dpkg --print-architecture) ($(date)) $(whoami)@$(hostname | cut -d . -f 1) $1 $2" >> $overview_log
}

> $LOGFILE

# Do the actual building
if ./build.sh "$ARCH" >>"$LOGFILE" 2>&1 ; then
    # if it went ok get things ready for publishing
    # we treat the daily netinst images in a different way
    if [ "$INSTALLER_CD" = "1" -o "$INSTALLER_CD" = "2" ] ; then

        ##################################
        # NETINST STUFF
        ##################################

        # make the dirs we'll use to publish things
        TOPDIR="$PUBDIRJIG"/$OUTARCH
        mkdir -p $TOPDIR/iso-cd $TOPDIR/jigdo-cd

        # put the isos and jigdos in their place
        for i in "$OUT"/*-1.iso; do
            BASE=`basename $i .iso`
            NETINSTNAME=`echo $BASE | sed 's/-BC-1/-businesscard/g;s/-NETINST-1/-netinst/g'`
            mv $OUT/$BASE.iso $TOPDIR/iso-cd/$NETINSTNAME.iso
            cat $OUT/$BASE.jigdo | \
                sed 's/-BC-1/-businesscard/g;s/-NETINST-1/-netinst/g' | \
                gzip --best --no-name > $TOPDIR/jigdo-cd/$NETINSTNAME.jigdo
            rm $OUT/$BASE.jigdo
            mv $OUT/$BASE.template $TOPDIR/jigdo-cd/$NETINSTNAME.template
            # Make sure that the ISO is as new/newer than the jigdo file; #587774
            touch $TOPDIR/iso-cd/$NETINSTNAME.iso
        done
        rm -f "$OUT"/*

    else

        #######################################
        # NORMAL STUFF - full builds (weekly)
        #######################################

        # finish up the jigdos (compress & move them)
        gzip --best --no-name "$OUT"/*.jigdo
        for i in "$OUT"/*.jigdo.gz; do
            mv $i ${i%.gz}
        done

        # Make sure that the ISOs are as new/newer than the jigdo files; #587774
	for file in "$OUT"/*.iso; do
	    if [ -e $file ] ; then 
		touch $file
	    fi
        done

        mkdir -p "$PUBDIRJIG"/$OUTARCH/jigdo-${OUT_TYPE}
        cat "$OUT"/MD5SUMS$SUMS_EXTENSION >> "$PUBDIRJIG"/$OUTARCH/jigdo-${OUT_TYPE}/MD5SUMS$SUMS_EXTENSION
        cat "$OUT"/SHA1SUMS$SUMS_EXTENSION >> "$PUBDIRJIG"/$OUTARCH/jigdo-${OUT_TYPE}/SHA1SUMS$SUMS_EXTENSION
        mv "$OUT"/*.template "$PUBDIRJIG"/$OUTARCH/jigdo-${OUT_TYPE}
        mv "$OUT"/*.jigdo    "$PUBDIRJIG"/$OUTARCH/jigdo-${OUT_TYPE}

        mkdir -p "$PUBDIRJIG"/$OUTARCH/iso-${OUT_TYPE}
        cat "$OUT"/MD5SUMS$SUMS_EXTENSION >> "$PUBDIRJIG"/$OUTARCH/iso-${OUT_TYPE}/MD5SUMS$SUMS_EXTENSION
        cat "$OUT"/SHA1SUMS$SUMS_EXTENSION >> "$PUBDIRJIG"/$OUTARCH/iso-${OUT_TYPE}/SHA1SUMS$SUMS_EXTENSION
        mv "$OUT"/*.iso    "$PUBDIRJIG"/$OUTARCH/iso-${OUT_TYPE}

    fi

    touch $TDIR/$CODENAME/1.pkgs_extracted # so we don't get errors below
    for file in `cat $TDIR/$CODENAME/*.pkgs_extracted | sort | uniq`; do
        basefile=`basename $file`
        if [ ! -e $EXTRACTED_SOURCES/$file ] ; then
            cp -a  $MIRROR/$file $EXTRACTED_SOURCES
        fi
    done

    # Mail the sizes of the images
    if [ -e "../.debian-cd.mail" ] ; then
        MYEMAIL=`grep -v "^#" "../.debian-cd.mail"`
    else
        MYEMAIL=`whoami`
    fi

    for i in $MYEMAIL
    do
        grep "extents written" "$LOGFILE"|mail -s "testingcds.lenny $RUN went ok" "$i"
    done
    overview "$RUN" success

else
    # Run failed
    if [ -e "../.debian-cd.mail" ] ; then
        MYEMAIL=`grep -v "^#" "../.debian-cd.mail"`
    else
        MYEMAIL=`whoami`
    fi
    for i in $MYEMAIL
    do
        (echo Error when trying to create cds for $RUN ; cat $LOGFILE) | \
            mail -s "testingcds.lenny $RUN has failed; log included" "$i"
    done
    overview "$RUN" failed
fi
