#!/bin/bash
#
# testingcds (c) 2005 Santiago Garcia Mantinan <manty@manty.net>
#
# GPL v2
#
# This file is included here just as an example, it was used when building the
# official testing cds at some point, it was written for a very specific setup
# and then went over a lot of changes during its life, so now this code is
# horrible, hoever some fellows feel it should be included in debian-cd,
# well, I (manty) will leave that on their hands.
#
# The setup we have uses normal debian-cd for daily builds, while it uses a jte
# patched debian-cd for weekly builds, this is done just for speed, the script
# should work with normal debian-cd for all kind of builds just removing -jte
# down there. We are currently just building isos for dailies and jigdos for
# weeklies, no snapshots being generated on the build machine, so I cannot
# waranty that all the code down here works, again, I must stress that you
# should take this just as an example, because part of it is untested and
# the rest is written for a very very specific setup, so... no waranties at all
#
# This is how this script is called for the daily images:
# OMIT_MANUAL=1 NORECOMMENDS=1 NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=1 TASK=tasks/debian-installer-etch DOJIGDO=0 DI=etch DI_DIST=etch ./testingcds "$arch"
# OMIT_MANUAL=1 NORECOMMENDS=1 NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 TASK=tasks/debian-installer+kernel-etch DOJIGDO=0 DI=etch DI_DIST=etch ./testingcds "$arch"
# OMIT_MANUAL=1 NORECOMMENDS=1 NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=1 TASK=tasks/debian-installer-sid DOJIGDO=0 DI=sid DI_WWW_HOME=default DI_DIR="$ARCH_DI_DIR" ./testingcds "$arch"
# OMIT_MANUAL=1 NORECOMMENDS=1 NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 TASK=tasks/debian-installer+kernel-sid DOJIGDO=0 DI=sid DI_WWW_HOME=default DI_DIR="$ARCH_DI_DIR" ./testingcds "$arch"
# This is respectively for etch_d-i businesscards, etch_d-i netinsts,
# sid_d-i businesscards, and sid_d-i netinsts.
# Where $ARCH_DI_DIR is set to the path for the local mirror of the d-i daily
# built images, this parameter can be omited if no mirror of the images is used

# For the weekly images it is run for normal cds like this:
# DI_DIST=etch ./testingcds "$arch"
# and for the dvds like this:
# PUBDIRJIG=/path_to_the/dvd INSTALLER_CD=3 DEFBINSIZE=4440 DEFSRCSIZE=4432 DI_DIST=etch ./testingcds "$arch"

if [ "$DI"x = "sarge"x ] ; then
    CONF=CONF.sh.sarge
else
    CONF=CONF.sh
fi

# Set up and cleaning
if [ $# -lt 1 ] ; then
    echo $0 \$ARCH
    echo "variables: PUBDIR[ISO|JIG]"
    exit 1
fi

if [ ! "$DATE" ] ; then
    DATE=`/bin/date -u +%Y%m%d`
fi

export ARCH=$1
export PATH=`pwd`/debootstrap/usr/sbin:$PATH:/sbin:/usr/sbin

if [ ! "$JIGDOFALLBACKURLS" ] ; then
   export JIGDOFALLBACKURLS="Debian=http://us.cdimage.debian.org/cdimage/snapshot/Debian/"
fi

# $DI is used to set DI_CODENAME and also to specify the directory for images
if [ "$DI" ] ; then
    export DI_CODENAME="$DI"
    PUBDIRJIG="$PUBDIRJIG"/"$DI"_d-i
    PUBDIRISO="$PUBDIRISO"/"$DI"_d-i
fi

CALC="Using previous sizes estimations."
if [ "$INSTALLER_CD" = "1" -o "$INSTALLER_CD" = "2" ] ; then
    # Do a traditional build for the ISOs of the small cds
    cd debian-cd && \
        . ../$CONF
    # this is for build.sh
    export CF=../$CONF
    export IMAGETARGET=bin-official_images
    export NOSOURCE=yes
    # to save some time
    export SKIPMIRRORCHECK=yes
else
    # Do the size estimation and a JTE build for jigdos
    cd debian-cd && \
        . ../$CONF && \
        export IMAGETARGET="ok bootable upgrade bin-infos bin-list" && \
        export CF=../$CONF && \
        ./build.sh $ARCH >/dev/null 2>&1 && \
        cd tools && \
        CALC=`./calc` && \
        cd ..
    # this is for build.sh
    if [ "$ARCH" = "i386" ] ; then
        export IMAGETARGET=official_images
        unset NOSOURCE
    else
        export NOSOURCE=yes
        export IMAGETARGET=bin-official_images
    fi
fi

if [ ! "$OUT" ] ; then
    echo Error on the config
    exit 1
fi

if [ "$INSTALLER_CD" = "1" ] ; then
    if [ "$DI"x = "sarge"x ] ; then
        export OFFICIAL="Official BusinessCard"
    else
        export OFFICIAL="Official BusinessCard Snapshot"
    fi
elif [ "$INSTALLER_CD" = "2" ] ; then
    if [ "$DI"x = "sarge"x ] ; then
        export OFFICIAL="Official NetInst"
    else
        export OFFICIAL="Official NetInst Snapshot"
    fi
fi

export LOG="`pwd`/../log/"
export RUN="$INSTALLER_CD$DI$ARCH"
export LOGFILE="$LOG/$RUN"

rm -rf "$OUT"
mkdir -p "$OUT"
mkdir -p "$LOG"

overview_log="$LOG/overview"
overview () {
    if [ -e $overview_log ]; then
    	grep -v " $1 " $overview_log > $overview_log.new
        mv $overview_log.new $overview_log
    fi
    LANG=C echo "$(dpkg --print-architecture) ($(date)) $(whoami)@$(hostname | cut -d . -f 1) $1 $2" >> $overview_log
}

# Upgrade debian-installer's task file
# changed this old line into the new one so that amd64 doesn't break
# cd tasks && ../tools/generate_di_list && ../tools/generate_di+k_list && cd .. || exit 1
cd tasks && ../tools/generate_di_list ; ../tools/generate_di+k_list ; cd ..
DEBOOTUDEB=`zcat $MIRROR/dists/sid/main/debian-installer/binary-$ARCH/Packages.gz | /bin/sed -n \
           's/Filename: \(pool\/main\/d\/debootstrap\/debootstrap-udeb.*udeb\)$/\1/p'`
if [ -z "$DEBOOTUDEB" ] ; then
    exit 1
fi

echo "$CALC" >"$LOGFILE"
echo Using ${DEBOOTUDEB##*/} to get packages used by d-i. >> $LOGFILE
rm -rf ../debootstrap
dpkg -x "$MIRROR/$DEBOOTUDEB" ../debootstrap

# Do the actual building
if ./build.sh $ARCH >>"$LOGFILE" 2>&1 ; then
    # if it went ok get things ready for publishing
    # we treat the netinst images in a different way
    if [ "$INSTALLER_CD" = "1" -o "$INSTALLER_CD" = "2" ] ; then

        ##################################
        # NETINST STUFF (ISO ONLY for now)
        ##################################

        # make the dirs we'll use to publish things
        mkdir -p "$OUT"/$ARCH

        # rename the isos from .raw to .iso and put them in their place
        for i in "$OUT"/*-1.raw
        do
            I=${i##*/}
            if [ "$INSTALLER_CD" = "1" ] ; then
                NETINSTNAME=${I%-binary-1.raw}-businesscard.iso
            else
                NETINSTNAME=${I%-binary-1.raw}-netinst.iso
            fi
            mv $i "$OUT"/$ARCH/$NETINSTNAME
        done

        # change images names from raw to iso on the MD5SUMS
        sed "s/[^ ]*-1.raw$/$NETINSTNAME/" "$OUT"/MD5SUMS >"$OUT"/$ARCH/MD5SUMS

        # Publish the new version
        mkdir -p "$PUBDIRISO"/$DATE/$ARCH/iso-cd
        mv "$OUT"/$ARCH/$NETINSTNAME "$PUBDIRISO"/$DATE/$ARCH/iso-cd
        rm -f "$PUBDIRISO"/$ARCH/current
    else 
        #######################################
        # NORMAL STUFF - full builds (weekly)
        #######################################
        if [ "$INSTALLER_CD"x = "3"x ] ; then
            OUT_TYPE=dvd
        else
            OUT_TYPE=cd
        fi

        echo Making $ARCH "$OUT_TYPE"s in $OUT "($OUT/$ARCH/jigdo-${OUT_TYPE})"

	    # change images names from raw to iso on the MD5SUMS
        if [ ! -e $OUT/$ARCH/jigdo-${OUT_TYPE} ] ; then 
            mkdir -p $OUT/$ARCH/jigdo-${OUT_TYPE}
        fi
        sed 's/raw$/iso/' "$OUT"/MD5SUMS >"$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS

        # put the templates aside
        mv "$OUT"/*.template "$OUT"/$ARCH/jigdo-${OUT_TYPE}

        # finish up the jigdos (compress & move them)
        gzip --best --no-name "$OUT"/*.jigdo
        for i in "$OUT"/*.jigdo.gz
        do
            mv $i ${i%.gz}
        done
        mv "$OUT"/*.jigdo "$OUT"/$ARCH/jigdo-${OUT_TYPE}

        # Remove the old version and publish the new one
        if [ "$IMAGETARGET" = "official_images" ] ; then
            # Cope with the source discs as well for this arch
            rm -rf "$PUBDIRJIG"/source/jigdo-${OUT_TYPE}
            mkdir -p "$PUBDIRJIG"/source/jigdo-${OUT_TYPE}
            mv "$OUT"/$ARCH/jigdo-${OUT_TYPE}/*-source-*.jigdo "$PUBDIRJIG"/source/jigdo-${OUT_TYPE}
            grep "source-.*.iso$" "$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS > "$PUBDIRJIG"/source/jigdo-${OUT_TYPE}/MD5SUMS
            mv "$OUT"/$ARCH/jigdo-${OUT_TYPE}/*-source-*.template "$PUBDIRJIG"/source/jigdo-${OUT_TYPE}/
            grep -v "source-.*.iso$" "$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS > "$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS.new
            mv "$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS.new "$OUT"/$ARCH/jigdo-${OUT_TYPE}/MD5SUMS
        fi
        # Now do the binaries
        rm -rf "$PUBDIRJIG"/$ARCH/jigdo-${OUT_TYPE}
        mkdir -p "$PUBDIRJIG"/$ARCH/jigdo-${OUT_TYPE}
        mv "$OUT"/$ARCH/jigdo-${OUT_TYPE}/* "$PUBDIRJIG"/$ARCH/jigdo-${OUT_TYPE}/
    fi

    # Mail the cd sizes of the cds
    if [ -e "../.debian-cd.mail" ] ; then
        MYEMAIL=`grep -v "^#" "../.debian-cd.mail"`
    else
        MYEMAIL=`whoami`
    fi

    for i in $MYEMAIL
    do
        grep "extents written" "$LOGFILE"|mail -s "testingcds $RUN went ok" "$i"
    done
    overview "$RUN" success

else
    # Run failed
    if [ -e "../.debian-cd.mail" ] ; then
        MYEMAIL=`grep -v "^#" "../.debian-cd.mail"`
    else
        MYEMAIL=`whoami`
    fi
    for i in $MYEMAIL
    do
        (echo Error when trying to create cds for $RUN ; cat $LOGFILE) | \
            mail -s "testingcds $RUN has failed; log included" "$i"
    done
    overview "$RUN" failed
fi
