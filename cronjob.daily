#!/bin/bash

TOPDIR=$(dirname $0)

. $TOPDIR/settings.sh

export PUBDIRJIG=$PUBDIR/daily-builds
export DATE_BUILD="$DATE-$BUILDNUM"
export TESTING_SUITE=squeeze
BUILDS_RUNNING=""

. $TOPDIR/common.sh

# If we're doing a normal set of daily/weekly builds, leave the
# checksum filenames alone. Otherwise, make life easier for people
# combining things later and append a suitable name as we build.
if [ "$DEBVERSION"x != "testing"x ] ; then
    export SUMS_EXTENSION=".small"
fi

finalise_arch_dir () {
    ARCH=$1
    INST_VER=$2

    ARCH_ISO_DIR=$PUBDIRJIG/${INST_VER}_d-i/$DATE_BUILD/$ARCH/iso-cd
    ARCH_JIGDO_DIR=$PUBDIRJIG/${INST_VER}_d-i/$DATE_BUILD/$ARCH/jigdo-cd
    if [ -e $ARCH_ISO_DIR ] ; then
        cd $ARCH_ISO_DIR
        for file in *businesscard*iso *netinst*iso; do
	    if [ -f "$file" ] ; then
		zsyncmake -e -u $file $file > /dev/null
	    fi
        done
        DATESTRING=`date -u`
        sed "s/ARCH/$ARCH/g;s/DATE/$DATESTRING/g;s/BUILDNUM/$BUILDNUM/g;s/INST_VER/$INST_VER/g" $TOPDIR/daily.html > HEADER.html
        $TOPDIR/debian-cd/tools/imagesums $ARCH_JIGDO_DIR $SUMS_EXTENSION
        cp $ARCH_JIGDO_DIR/*SUMS* $ARCH_ISO_DIR
        cd ..
        ~/build/mktorrent iso-cd/*iso
        ~/build/mklist iso-cd/*iso
        cd $TOPDIR
    else
        echo "  finalise_arch_dir: $ARCH_ISO_DIR does not exist!"
    fi
}

export RSYNC_TARGET=/mnt/nfs-cdimage/daily-builds

if [ "$ARCHES"x = ""x ] ; then
    ARCHES="amd64 armel hppa i386 ia64 mips mipsel powerpc sparc multi-arch"
fi

cd $TOPDIR &&
if lockfile -r0 .debian-cd.lock ; then

    echo "svn update debian-cd:"
    cd debian-cd && svn cleanup ; svn up ; cd ..

    cd $TOPDIR

    . images4testing_d-i

    # Allow desktop selection in isolinux menu for i386 and amd64
    # For other arches this is a harmless no-op
    export DESKTOP=all
    export KERNEL_PARAMS="desktop=all"

    for arch in $ARCHES; do
	rm -rf $PUBDIRJIG/$arch
	arch_error=""
	arch_start=`now`
	
        echo "Building $arch:"
	ARCHDIR=${PUBDIRJIG}/sid_d-i/${DATE_BUILD}/${arch}
	mkdir -p ${ARCHDIR}/iso-cd ${ARCHDIR}/jigdo-cd

	ARCHDIR=${PUBDIRJIG}/${TESTING_SUITE}_d-i/${DATE_BUILD}/${arch}
	mkdir -p ${ARCHDIR}/iso-cd ${ARCHDIR}/jigdo-cd

        if [ "$arch" = "multi-arch" ] ; then
	    build_started SIDNIFIRMWARE
            OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
                NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=C \
		FORCE_FIRMWARE=1 CDNAME=firmware \
                TASK=debian-installer+kernel LOGAPPEND="-1" \
                MAXISOS=ALL MAXJIGDOS=ALL \
                DI=sid DI_DIST="$DI_DIST" VARIANTS=xen \
                DI_WWW_HOME=default ./testingcds "amd64 i386 powerpc" &

            build_started SIDNI
            OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
                NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 \
                TASK=debian-installer+kernel LOGAPPEND="-1" \
                MAXISOS=ALL MAXJIGDOS=ALL \
                DI=sid DI_DIST="$DI_DIST" VARIANTS=xen \
                DI_WWW_HOME=default ./testingcds "amd64 i386 powerpc" &

	    build_started TESTINGNIFIRMWARE
            OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
                NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=C \
		FORCE_FIRMWARE=1 CDNAME=firmware \
                TASK=debian-installer+kernel LOGAPPEND="-1" \
                MAXISOS=ALL MAXJIGDOS=ALL \
                DI=${TESTING_SUITE} DI_DIST="$DI_DIST" VARIANTS=xen \
                ./testingcds "amd64 i386 powerpc" &

	    build_started TESTINGNI
            OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
                NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 \
                TASK=debian-installer+kernel LOGAPPEND="-1" \
                MAXISOS=ALL MAXJIGDOS=ALL \
                DI=${TESTING_SUITE} DI_DIST="$DI_DIST" VARIANTS=xen \
                ./testingcds "amd64 i386 powerpc" &

	    catch_parallel_builds
	    if [ "$arch_error"x = "none"x ] ; then
		finalise_arch_dir $arch sid
		finalise_arch_dir $arch ${TESTING_SUITE}
	    fi

        else # end of m-a

	    case $arch in
		i386|amd64|powerpc)
                    export BUILDNAME="FIRMWARE"
		    FIRMWARESTART=`now`
                    BUILDS_RUNNING="$BUILDS_RUNNING $BUILDNAME"
		    OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
			FORCE_FIRMWARE=1 CDNAME=firmware \
			NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=C \
			TASK=debian-installer+kernel MAXISOS=ALL MAXJIGDOS=ALL \
			DI=sid DI_WWW_HOME=default DI_DIR="$ARCH_DI_DIR" \
			./testingcds "$arch" &
		    ;;
	    esac
            
            export BUILDNAME="SIDBC"
	    SIDBCSTART=`now`
            BUILDS_RUNNING="$BUILDS_RUNNING $BUILDNAME"
	    OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
		NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=1 \
		TASK=debian-installer MAXISOS=ALL MAXJIGDOS=ALL \
		DI=sid DI_WWW_HOME=default DI_DIR="$ARCH_DI_DIR" \
		./testingcds "$arch" &

            export BUILDNAME="SIDNI"
	    SIDNISTART=`now`
            BUILDS_RUNNING="$BUILDS_RUNNING $BUILDNAME"
	    OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
		NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 \
		TASK=debian-installer+kernel MAXISOS=ALL MAXJIGDOS=ALL \
		DI=sid DI_WWW_HOME=default DI_DIR="$ARCH_DI_DIR" \
		./testingcds "$arch" &

            export BUILDNAME="TESTINGBC"
	    TESTINGBCSTART=`now`
            BUILDS_RUNNING="$BUILDS_RUNNING $BUILDNAME"
	    OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
		NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=1 \
		TASK=debian-installer MAXISOS=ALL MAXJIGDOS=ALL \
		DI=${TESTING_SUITE} DI_DIST="$DI_DIST" \
		./testingcds "$arch" &

            export BUILDNAME="TESTINGNI"
	    TESTINGNISTART=`now`
            BUILDS_RUNNING="$BUILDS_RUNNING $BUILDNAME"
	    OMIT_RELEASE_NOTES=1 OMIT_MANUAL=1 NORECOMMENDS=1 \
		NOSUGGESTS=1 COMPLETE=0 INSTALLER_CD=2 \
		TASK=debian-installer+kernel MAXISOS=ALL MAXJIGDOS=ALL \
		DI=${TESTING_SUITE} DI_DIST="$DI_DIST" \
		./testingcds "$arch" &

	    catch_parallel_builds
	    if [ "$arch_error"x = "none"x ] ; then
		finalise_arch_dir $arch sid
		finalise_arch_dir $arch ${TESTING_SUITE}
	    fi

        fi # end of normal arch build
    done

    if [ "$NOSYNC"x = ""x ] ; then
	echo "Sync across to output dir: $RSYNC_TARGET"
        rsync -rHltv $PUBDIRJIG/ $RSYNC_TARGET/
        echo "Remove extra dailies:"
        ~/bin/remove_extra_dailies

        echo "Clean up old builds on build machine:"
        for DIR in $PUBDIRJIG/* ; do
            cd $DIR
            for THIS in 20* ; do
                if [ $THIS != $DATE-$BUILDNUM ] ; then
                    echo "  Deleting $DIR/$THIS"
                    rm -rf $DIR/$THIS
                fi
            done
        done

        echo "$DATE-$BUILDNUM" > $RSYNC_TARGET/daily-trace
    fi

    cd $TOPDIR
    rm -f .debian-cd.lock
fi
